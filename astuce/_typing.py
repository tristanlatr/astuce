from typing import TYPE_CHECKING, NewType, Union
import ast

if TYPE_CHECKING:
    from .nodes import ASTNode as ConcreteASTNode
else:
    ConcreteASTNode = object

class Module(ast.Module, ConcreteASTNode):...
class ClassDef(ast.ClassDef, ConcreteASTNode):...
class FunctionDef(ast.FunctionDef, ConcreteASTNode):...
class AsyncFunctionDef(ast.AsyncFunctionDef, ConcreteASTNode):...
class Name(ast.Name, ConcreteASTNode):...
class Attribute(ast.Attribute, ConcreteASTNode):...
class arg(ast.arg, ConcreteASTNode):...
class Import(ast.Import, ConcreteASTNode):...
class ImportFrom(ast.ImportFrom, ConcreteASTNode):...
class GeneratorExp(ast.GeneratorExp, ConcreteASTNode):...
class DictComp(ast.DictComp, ConcreteASTNode):...
class SetComp(ast.DictComp, ConcreteASTNode):...
class ListComp(ast.List, ConcreteASTNode):...
class Lambda(ast.Lambda, ConcreteASTNode):...

LocalsAssignT = Union[ClassDef,
            FunctionDef, AsyncFunctionDef, 
            Name, arg, Import, ImportFrom]
"""
This type represent all possible types stored in scopes locals dict.
"""

FrameNodeT = Union[Module, FunctionDef, AsyncFunctionDef, ClassDef, Lambda]
ScopedNodeT = Union[Module, FunctionDef, AsyncFunctionDef, ClassDef, Lambda, 
                GeneratorExp, DictComp, SetComp, ListComp]


if TYPE_CHECKING:
    class ASTstmt(ConcreteASTNode, ast.stmt): # type:ignore[misc]
        """For typing only"""

    class ASTexpr(ConcreteASTNode, ast.stmt): # type:ignore[misc]
        """For typing only"""
    
    class ASTNode(ast.AST, ConcreteASTNode):...
else:
    ASTstmt = ast.stmt
    ASTexpr = ast.expr
    ASTNode = ast.AST

